import asyncio
import logging
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram import types
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

import telegram_keyboards
from requests_server import BackendConnector
import texts
from telegram_keyboards import keyboard_main, GenerateInlineServer
from db_connector import DB_Handler
import os
import requests
import urllib3
from group_sender import GlobalSender
from texts import help_text

urllib3.disable_warnings()
import threading
from initialize import sendStartBot

COUNT_SERVERS = 2

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.environ["TOKEN"])
dp = Dispatcher()

db = DB_Handler(
    host="localhost", port="5432", db="tg_bot_base", user="postgres", passw="admin"
)

users = db.getUsers()


def updateUsersList():
    global users
    users = db.getUsers()
    return users


gs = GlobalSender(bot, users, updateUsersList)

bc = BackendConnector('https', '26.0.102.28', '7278')


def find_user(id_find):
    for user in users:
        if id_find == user.chat_id:
            return user
    return None


@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö")
async def cmd_start(message: types.Message):
    await check_all_servers(message)


@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def help_start(message: types.Message):
    await message.reply(
        texts.help_text
    )


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = find_user(message.chat.id)
    if find_user(message.chat.id) is not None:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}", reply_markup=keyboard_main)
    else:
        await message.answer(
            texts.TryUnautorizedToUser(message)
        )
        await gs.sendToAdmin(
            texts.TryUnautorizedToAdmin(message)
        )


@dp.message(Command("all_servers"))
async def check_all_servers(message: types.Message):
    args = message.text.split()[1:]
    if find_user(message.chat.id) is not None:
        try:
            result = bc.fetchGet('/api/Server/servers', auth=True)

            text = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:\n"""
            for i in result["response"]:
                text += f"\nID —Å–µ—Ä–≤–µ—Ä–∞: {i['id']}"
                text += f"\n–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞: {i['displayedName']}"
                text += f"\nIP —Å–µ—Ä–≤–µ—Ä–∞: {i['host']}"
                text += f"\n–ü–æ—Ä—Ç: {i['port']}"
                text += f"\n"

            keyboard = telegram_keyboards.GenerateButtonsServers(2)
            await message.reply(text, reply_markup=keyboard)

        except:
            await message.reply("–ö–æ—Å—Ç—è –≤–∫–ª—é—á–∏ —Å–µ—Ä–≤–µ—Ä –ø–∂")
            '''
            await bot.send_message(
                "719194958", "–ö–æ—Å—Ç—è, —è —É—Å—Ç–∞–ª! –í–∫–ª—é—á–∏ —Å–µ—Ä–≤–µ—Ä –ø–∂!!! –ù–∞–¥–æ —Ñ–∏–≥–∞—á–∏—Ç—å"
            )
            '''
    else:
        await message.answer(
            texts.TryUnautorizedToUser(message)
        )
        await gs.sendToAdmin(
            texts.TryUnautorizedToAdmin(message)
        )


@dp.callback_query(F.data[:6] == "Server")
async def process_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    mes = await bot.send_message(
        callback_query.from_user.id,
        f"–°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ {callback_query.data[6:]}...",
    )
    args = [callback_query.data[6:]]

    result = bc.fetchGet('/api/Server/stats',auth=True,data = {'id':args[0]})
    text = ""

    text += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {args[0]}\n"
    text += f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {result['response']['processorPercentLoading']}\n"
    text += f"–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {result['response']['databaseSize']}\n"
    text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {result['response']['connectionInfo']['totalConnections']}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {result['response']['connectionInfo']['nonIdleConnections']}\n"

    await bot.send_message(
        callback_query.message.chat.id, text, reply_markup=GenerateInlineServer(args[0])
    )
    await mes.delete()


@dp.callback_query(F.data[:10] == "setprocogr")
async def process_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    number_server = callback_query.data[10:]
    buttons = [
        [
            types.InlineKeyboardButton(
                text=f"50%", callback_data=f"setogrproc{number_server}|50"
            ),
            types.InlineKeyboardButton(
                text=f"60%", callback_data=f"setogrproc{number_server}|60"
            ),
            types.InlineKeyboardButton(
                text=f"70%", callback_data=f"setogrproc{number_server}|70"
            ),
            types.InlineKeyboardButton(
                text=f"80%", callback_data=f"setogrproc{number_server}|80"
            ),
            types.InlineKeyboardButton(
                text=f"90%", callback_data=f"setogrproc{number_server}|90"
            ),
            types.InlineKeyboardButton(
                text=f"100%", callback_data=f"setogrmem{number_server}|100"
            ),
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.edit_reply_markup(
        str(callback_query.message.message_id), reply_markup=keyboard
    )


@dp.callback_query(F.data[:17] == "deleteconnections")
async def process_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    number_server = callback_query.data[17:]

    result = bc.fetchGet('/api/Server/stats',auth=True,data = {'id':number_server})

    text = ""

    text += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {number_server}\n"
    text += f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {result['response']['processorPercentLoading']}\n"
    text += f"–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {result['response']['databaseSize']}\n"
    text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {result['response']['connectionInfo']['nonIdleConnections']}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {result['response']['connectionInfo']['nonIdleConnections']}\n"

    await callback_query.message.edit_text(text)
    await callback_query.message.edit_reply_markup(
        reply_markup=GenerateInlineServer(number_server)
    )
    await bot.send_message(callback_query.message.chat.id, "–£–¥–∞–ª–∏–ª–∏ –ª–∏—à–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")


@dp.callback_query(F.data[:9] == "setmemogr")
async def process_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    number_server = callback_query.data[9:]
    buttons = [
        [
            types.InlineKeyboardButton(
                text=f"50%", callback_data=f"setogrmem{number_server}|50"
            ),
            types.InlineKeyboardButton(
                text=f"60%", callback_data=f"setogrmem{number_server}|60"
            ),
            types.InlineKeyboardButton(
                text=f"70%", callback_data=f"setogrmem{number_server}|70"
            ),
            types.InlineKeyboardButton(
                text=f"80%", callback_data=f"setogrmem{number_server}|80"
            ),
            types.InlineKeyboardButton(
                text=f"90%", callback_data=f"setogrmem{number_server}|90"
            ),
            types.InlineKeyboardButton(
                text=f"100%", callback_data=f"setogrmem{number_server}|100"
            ),
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.edit_reply_markup(
        str(callback_query.message.message_id), reply_markup=keyboard
    )


@dp.callback_query(F.data[:11] == "sendgraphic")
async def send_graphic(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    args = callback_query.data.split()[1:]
    total = 100
    used = 20
    r = requests.get(f"http://26.65.125.199:8000/generate_chart/{total}/{used}")
    photo = types.BufferedInputFile(r.content, "image.png")
    await bot.send_photo(chat_id=callback_query.message.chat.id, photo=photo)


@dp.callback_query(F.data[:10] == "setogrproc")
async def process_button1(callback_query: types.CallbackQuery):
    args = [callback_query.data.split("|")[0][10:], callback_query.data.split("|")[1]]

    await callback_query.message.edit_reply_markup(
        str(callback_query.message.message_id),
        reply_markup=GenerateInlineServer(args[0]),
    )
    await bot.send_message(
        str(callback_query.message.chat.id),
        f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É –Ω–∞ {args[1]}% –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {args[0]}",
    )


@dp.callback_query(F.data[:9] == "setogrmem")
async def process_button1(callback_query: types.CallbackQuery):
    args = [callback_query.data.split("|")[0][9:], callback_query.data.split("|")[1]]

    await callback_query.message.edit_reply_markup(
        str(callback_query.message.message_id),
        reply_markup=GenerateInlineServer(args[0]),
    )
    await bot.send_message(
        str(callback_query.message.chat.id),
        f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ {args[1]}% –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {args[0]}",
    )


@dp.message(Command("check"))
async def check_start(message: types.Message):
    args = message.text.split()[1:]
    if find_user(message.chat.id) is not None:

        if args:
            result = bc.fetchGet('/api/Server/stats',auth=True,data = {'id':args[0]})
            text = ""

            text += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {args[0]}\n"
            text += f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {result['response']['processorPercentLoading']}\n"
            text += f"–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {result['response']['databaseSize']}\n"
            text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {result['response']['connectionInfo']['totalConnections']}\n"
            text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {result['response']['connectionInfo']['nonIdleConnections']}\n"

            await message.reply(f"{text}", reply_markup=GenerateInlineServer(args[0]))
        else:
            await message.reply("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É /check –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
    else:
        await message.answer(
            f"–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await gs.sendToAdmin(
            f"–ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ —É –±–æ—Ç–∞:\nchat_id: {message.chat.id}\n–ò–º—è –≤ Telegram: {message.chat.full_name}\n–î–∞–Ω–Ω—ã–µ –ø—Ä–æ –±–∞–∑—É: {args}"
        )


async def main():
    await gs.sendToNotified('–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç! Status: 200', keyboard=keyboard_main)

    # tasks = [longpooling(), dp.start_polling(bot)]
    tasks = [dp.start_polling(bot)]

    await asyncio.gather(*tasks)


def func():
    asyncio.run(main())


def func2():
    asyncio.run(longpooling())


async def longpooling():
    import time

    while "Kostya" != "lox":
        for i in range(COUNT_SERVERS):
            result = bc.fetchGet('/api/Server/stats',auth=True,data = {'id':i+1})
            jsik = r.json()
            """"""
            r = requests.post(
                f"http://26.65.125.199:8000/sendMessage?temperature=0.87",
                json=[
                    {
                        "role": "user",
                        "content": "–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ PostgreSQL. –í–æ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: "
                                   + jsik["response"][0]["text"],
                    }
                ],
                headers={
                    "accept": "application/json",
                    "Content-type": "application/json",
                },
                verify=False,
            )
            res = r.json()
            buttons = [
                [
                    types.InlineKeyboardButton(
                        text=f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Å –ë–î", callback_data=f"deleteDB|{i + 1}"
                    ),
                ],
            ]
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            if jsik["response"][0]["alert"] == "Error":
                await gs.sendToAdmin(
                    f"‚ùóÔ∏è–¢–†–ï–í–û–ì–ê! –°–ï–†–í–ï–† {i + 1}‚ùóÔ∏è\n{jsik['response'][0]['text']}\n\nü§ñ–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Çü§ñ:{res['choices'][0]['message']['content']}",
                    keyboard=keyboard,
                )
        time.sleep(15)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    asyncio.run(main())
